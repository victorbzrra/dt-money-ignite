{"version":3,"sources":["assets/logo.svg","components/Header/styles.ts","components/Header/index.tsx","services/api.ts","hooks/useTransactions.tsx","assets/income.svg","assets/outcome.svg","assets/total.svg","components/Summary/styles.ts","components/Summary/index.tsx","components/TransactionsTable/styles.ts","components/TransactionsTable/index.tsx","components/Dashboard/styles.ts","components/Dashboard/index.tsx","assets/close.svg","components/NewTransactionModal/styles.tsx","components/NewTransactionModal/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["Container","styled","header","Content","div","Header","onOpenNewTransactionModal","src","logoImg","alt","type","onClick","api","axios","create","baseURL","TransactionsContext","createContext","TransactionsProvider","children","useState","transactions","setTransactions","transactionInput","a","post","createdAt","Date","response","transaction","data","useEffect","get","then","Provider","value","createTransaction","useTransactions","useContext","Summary","summary","reduce","acc","deposits","amount","total","withdraws","incomeImg","Intl","NumberFormat","style","currency","format","outcomeImg","className","totalIgm","TransactionTable","map","title","category","DateTimeFormat","id","main","Dashboard","form","TransactionTypeContainer","colors","green","red","RadioBox","button","props","isActive","transparentize","activeColor","darken","NewTransactionModal","isOpen","onRequestClose","setTitle","setAmount","setType","setCategory","event","preventDefault","overlayClassName","closeImg","onSubmit","placeholder","onChange","target","Number","GlobalStyle","createGlobalStyle","App","isNewTransactionModalOpen","setIsNewTransactionModalOpen","Modal","setAppElement","createServer","models","Model","seeds","server","db","loadData","routes","this","namespace","schema","all","request","JSON","parse","requestBody","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b876358c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.614d71d1.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.header`\r\n  background: var(--blue);\r\n`;\r\n\r\nexport const Content = styled.div`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n\r\n  padding: 2rem 1rem 10rem;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  \r\n  button {\r\n    font-size: 1rem;\r\n    color: #FFF;\r\n    background: var(--blue-light);\r\n    border: 0;\r\n    padding: 0 2rem;\r\n    border-radius: 0.25rem;\r\n    height: 3rem;\r\n    \r\n    transition: filter 0.2s;\r\n    \r\n    &:hover {\r\n       filter: brightness(0.9);\r\n    }\r\n  }\r\n`;\r\n","import logoImg from '../../assets/logo.svg'\r\n\r\nimport { Container, Content } from './styles'\r\n\r\ninterface HeaderProps {\r\n  onOpenNewTransactionModal: () => void;\r\n}\r\n\r\nexport function Header({ onOpenNewTransactionModal }: HeaderProps) {\r\n  return (\r\n    <Container>\r\n      <Content>\r\n        <img src={logoImg} alt=\"dt money\" />\r\n        <button type=\"button\" onClick={onOpenNewTransactionModal}>Nova transação</button>\r\n      </Content>\r\n    </Container>\r\n  );\r\n}","import axios from 'axios';\r\n\r\nexport const api = axios.create({\r\n  baseURL: 'http://localhost:3000/api',\r\n});","import { createContext, ReactNode, useContext, useEffect, useState } from \"react\";\r\nimport { api } from \"../services/api\";\r\n\r\ninterface Transaction {\r\n  id: number;\r\n  title: string;\r\n  amount: number;\r\n  type: string;\r\n  category: string;\r\n  createdAt: string;\r\n}\r\n\r\ntype TransactionInput = Omit<Transaction, 'id' | 'createdAt'>;\r\n\r\ninterface TransactionsProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\ninterface TransactionContextData {\r\n  transactions: Transaction[];\r\n  createTransaction: (transaction: TransactionInput) => Promise<void>;\r\n}\r\n\r\nconst TransactionsContext = createContext<TransactionContextData>(\r\n  {} as TransactionContextData\r\n);\r\n\r\nexport function TransactionsProvider({ children }: TransactionsProviderProps) {\r\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\r\n\r\n  useEffect(() => {\r\n    api.get('/transactions')\r\n      .then(response => setTransactions(response.data.transactions));\r\n  }, []);\r\n\r\n  async function createTransaction(transactionInput: TransactionInput) {\r\n    const response = await api.post('/transactions', {\r\n      ...transactionInput,\r\n      createdAt: new Date()\r\n    });\r\n\r\n    const { transaction } = response.data;\r\n\r\n    setTransactions([\r\n      ...transactions,\r\n      transaction\r\n    ])\r\n  }\r\n\r\n  return (\r\n    <TransactionsContext.Provider value={{ transactions, createTransaction}}>\r\n      {children}\r\n    </TransactionsContext.Provider>\r\n  )\r\n}\r\n\r\nexport function useTransactions() {\r\n  const context = useContext(TransactionsContext);\r\n\r\n  return context;\r\n}","export default __webpack_public_path__ + \"static/media/income.d58effe2.svg\";","export default __webpack_public_path__ + \"static/media/outcome.6eb96d30.svg\";","export default __webpack_public_path__ + \"static/media/total.e90c2d1e.svg\";","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  gap: 2rem;\r\n  margin-top: -10rem;\r\n\r\n  div {\r\n    background: var(--shape);\r\n    padding: 1.5rem 2rem;\r\n    border-radius: 0.25rem;\r\n    color: var(--text-title);\r\n\r\n    header {\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: space-between;\r\n    }\r\n\r\n    strong {\r\n      display: block;\r\n      margin-top: 1rem;\r\n      font-size: 2rem;\r\n      font-weight: 500;\r\n      line-height: 3rem;\r\n    }\r\n\r\n    &.highlight-background {\r\n      background: var(--green);\r\n      color: #FFF;\r\n    }\r\n  }\r\n`;","import { useTransactions } from \"../../hooks/useTransactions\";\r\n\r\nimport incomeImg from \"../../assets/income.svg\";\r\nimport outcomeImg from \"../../assets/outcome.svg\";\r\nimport totalIgm from \"../../assets/total.svg\";\r\n\r\nimport { Container } from \"./styles\";\r\n\r\nexport function Summary() {\r\n  const { transactions } = useTransactions();\r\n\r\n  const summary = transactions.reduce((acc, transaction) => {\r\n    if (transaction.type === 'deposit') {\r\n      acc.deposits += transaction.amount;\r\n      acc.total += transaction.amount;\r\n    } else {\r\n      acc.withdraws += transaction.amount;\r\n      acc.total -= transaction.amount;\r\n    }\r\n\r\n    return acc;\r\n  }, {\r\n    deposits: 0,\r\n    withdraws: 0,\r\n    total: 0\r\n  })\r\n\r\n  return (\r\n    <Container>\r\n      <div>\r\n        <header>\r\n          <p>Entradas</p>\r\n          <img src={incomeImg} alt=\"Entradas\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.deposits)}\r\n        </strong>\r\n      </div>\r\n      <div>\r\n        <header>\r\n          <p>Saídas</p>\r\n          <img src={outcomeImg} alt=\"Saídas\" />\r\n        </header>\r\n        <strong>\r\n          -\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.withdraws)}\r\n        </strong>\r\n      </div>\r\n      <div className=\"highlight-background\">\r\n        <header>\r\n          <p>Total</p>\r\n          <img src={totalIgm} alt=\"Total\" />\r\n        </header>\r\n        <strong>\r\n          {new Intl.NumberFormat(\"pt-BR\", {\r\n            style: \"currency\",\r\n            currency: \"BRL\",\r\n          }).format(summary.total)}\r\n        </strong>\r\n      </div>\r\n    </Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.div`\r\n  margin-top: 4rem;\r\n\r\n  table {\r\n    width: 100%;\r\n    border-spacing: 0 0.5rem;\r\n\r\n    th {\r\n      color: var(--text-body);\r\n      font-weight: 400;\r\n      padding: 1rem 2rem;\r\n      text-align: left;\r\n      line-height: 1.5rem;\r\n    }\r\n\r\n    td {\r\n      padding: 1rem 2rem;\r\n      border: 0;\r\n      background: var(--shape);\r\n      color: var(--text-body);\r\n      border-radius: 0.25rem;\r\n\r\n      &:first-child {\r\n        color: var(--text-title);\r\n      } \r\n\r\n      &.deposit {\r\n        color: var(--green);\r\n      }\r\n\r\n      &.withdraw {\r\n        color: var(--red);\r\n      }\r\n    }\r\n  }\r\n`;","import { Container } from \"../TransactionsTable/styles\";\r\nimport { useTransactions } from \"../../hooks/useTransactions\";\r\n\r\nexport function TransactionTable() {\r\n  const { transactions } = useTransactions();\r\n\r\n  return (\r\n    <Container>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Título</th>\r\n            <th>Valor</th>\r\n            <th>Categoria</th>\r\n            <th>Data</th>\r\n          </tr>\r\n        </thead>\r\n\r\n        <tbody>\r\n          {transactions.map((transaction) => (\r\n            <tr key={transaction.id}>\r\n              <td>{transaction.title}</td>\r\n              <td className={transaction.type}>\r\n                {new Intl.NumberFormat('pt-BR', {\r\n                  style: 'currency',\r\n                  currency: 'BRL'\r\n                }).format(transaction.amount)}\r\n              </td>\r\n              <td>{transaction.category}</td>\r\n              <td>\r\n                {new Intl.DateTimeFormat('pt-BR').format(\r\n                  new Date(transaction.createdAt)\r\n                )}\r\n              </td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </Container>\r\n  );\r\n}","import styled from \"styled-components\";\r\n\r\nexport const Container = styled.main`\r\n  max-width: 1120px;\r\n  margin: 0 auto;\r\n  padding: 2.5rem 1rem;\r\n`;","import { Summary } from \"../Summary\"\r\nimport { TransactionTable } from \"../TransactionsTable\"\r\n\r\nimport { Container } from \"./styles\"\r\n\r\nexport function Dashboard() {\r\n  return(\r\n    <Container>\r\n      <Summary />\r\n      <TransactionTable />\r\n    </Container>\r\n  )\r\n}","export default __webpack_public_path__ + \"static/media/close.f62862c6.svg\";","import styled from \"styled-components\";\r\nimport { darken, transparentize } from 'polished';\r\n\r\nexport const Container = styled.form`\r\n  h2 {\r\n    color: var(--text-title);\r\n    font-size: 1.5rem;\r\n    margin-bottom: 2rem;\r\n  }\r\n\r\n  input {\r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    border-radius: 0.25rem;\r\n    \r\n    border: 1px solid #d7d7d7;\r\n    background: #e7e9ee;\r\n\r\n    font-weight: 400;\r\n    font-size: 1rem;\r\n\r\n    &::placeholder {\r\n      color: var(--text-body);\r\n    }\r\n\r\n    & + input {\r\n      margin-top: 1rem;\r\n    }\r\n  }\r\n\r\n  button[type=\"submit\"] {\r\n    width: 100%;\r\n    padding: 0 1.5rem;\r\n    height: 4rem;\r\n    background: var(--green);\r\n    color: #FFF;\r\n    border-radius: 0.25rem;\r\n    border: 0;\r\n    font-size: 1rem;\r\n    margin-top: 1.5rem;\r\n    font-weight: 600;\r\n\r\n    transition: filter 0.2s;\r\n\r\n    &:hover{\r\n      filter: brightness(0.9);\r\n    }\r\n  }\r\n`;\r\n\r\nexport const TransactionTypeContainer = styled.div`\r\n  margin: 1rem 0;\r\n  display: grid;\r\n  grid-template-columns: 1fr 1fr;\r\n  gap: 0.5rem;\r\n`;\r\n\r\ninterface RadioBoxProps {\r\n  isActive: boolean;\r\n  activeColor: 'green' | 'red';\r\n}\r\n\r\nconst colors = {\r\n  green: '#33cc95',\r\n  red: '#e52e4d'\r\n};\r\n\r\nexport const RadioBox = styled.button<RadioBoxProps>`\r\n  height: 4rem;\r\n  border: 1px solid #d7d7d7;\r\n  border-radius: 0.25rem;\r\n\r\n  background: ${(props) => props.isActive \r\n    ? transparentize(0.9, colors[props.activeColor])  \r\n    : 'transparent'};\r\n\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  transition: border-color 0.2s;\r\n\r\n  &:hover {\r\n    border-color: ${darken(0.1, \"#d7d7d7\")};\r\n  }\r\n\r\n  img {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n\r\n  span {\r\n    display: inline-block;\r\n    margin-left: 1rem;\r\n    font-size: 1rem;\r\n    color: var(--text-title);\r\n  }\r\n`;","import Modal from 'react-modal';\r\nimport { FormEvent, useState } from 'react';\r\nimport { useTransactions } from '../../hooks/useTransactions';\r\n\r\nimport closeImg from '../../assets/close.svg';\r\nimport incomeImg from '../../assets/income.svg'; \r\nimport outcomeImg from '../../assets/outcome.svg';\r\n\r\nimport { Container, TransactionTypeContainer, RadioBox } from './styles';\r\ninterface NewTransactionModalProps {\r\n  isOpen: boolean;\r\n  onRequestClose: () => void;\r\n}\r\n\r\nexport function NewTransactionModal({ isOpen, onRequestClose }: NewTransactionModalProps){\r\n  const { createTransaction } = useTransactions();\r\n\r\n  const [title, setTitle] = useState('');\r\n  const [amount, setAmount] = useState(0);\r\n  const [type, setType] = useState('deposit');\r\n  const [category, setCategory] = useState('');\r\n\r\n  async function handleCreateNewTransaction(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    await createTransaction({\r\n      title,\r\n      amount,\r\n      category,\r\n      type\r\n    })\r\n\r\n    setTitle('');\r\n    setAmount(0);\r\n    setType('');\r\n    setCategory('deposit');\r\n    onRequestClose();\r\n  }\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={isOpen}\r\n      onRequestClose={onRequestClose}\r\n      overlayClassName=\"react-modal-overlay\"\r\n      className=\"react-modal-content\"\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        onClick={onRequestClose}\r\n        className=\"react-modal-close\"\r\n      >\r\n        <img src={closeImg} alt=\"Fechar modal\" />\r\n      </button>\r\n\r\n      <Container onSubmit={handleCreateNewTransaction}>\r\n        <h2>Cadastrar Transação</h2>\r\n\r\n        <input \r\n          placeholder=\"Título\" \r\n          value={title}\r\n          onChange={event => setTitle(event.target.value)}\r\n        />\r\n\r\n        <input \r\n          type=\"number\" \r\n          placeholder=\"Valor\"\r\n          value={amount}\r\n          onChange={event => setAmount(Number(event.target.value))}\r\n        />\r\n\r\n        <TransactionTypeContainer>\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setType(\"deposit\");\r\n            }}\r\n            isActive={type === \"deposit\"}\r\n            activeColor=\"green\"\r\n          >\r\n            <img src={incomeImg} alt=\"Entrada\" />\r\n            <span>Entrada</span>\r\n          </RadioBox>\r\n\r\n          <RadioBox\r\n            type=\"button\"\r\n            onClick={() => {\r\n              setType(\"withdraw\");\r\n            }}\r\n            isActive={type === \"withdraw\"}\r\n            activeColor=\"red\"\r\n          >\r\n            <img src={outcomeImg} alt=\"Saída\" />\r\n            <span>Saída</span>\r\n          </RadioBox>\r\n        </TransactionTypeContainer>\r\n\r\n        <input \r\n          placeholder=\"Categoria\" \r\n          value={category}\r\n          onChange={event => setCategory(event.target.value)}\r\n        />\r\n\r\n        <button type=\"submit\">Cadastrar</button>\r\n      </Container>\r\n    </Modal>\r\n  );\r\n};\r\n","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    :root {\r\n      --background: #f0f2f5;\r\n      --red: #e52e4d;\r\n      --blue: #5429cc;\r\n      --green: #33cc95;\r\n\r\n      --blue-light: #6933FF;\r\n\r\n      --text-title: #363f5f;\r\n      --text-body: #969cb3;\r\n\r\n      --shape: #ffffff;\r\n    }\r\n    \r\n    * {\r\n        margin: 0;\r\n        padding: 0;\r\n        box-sizing: border-box;\r\n    }\r\n\r\n    html {\r\n      @media (max-width: 1080px) {\r\n        font-size: 93.75%;\r\n      }\r\n\r\n      @media (max-width: 720px) {\r\n        font-size: 87.5%;\r\n      }\r\n    }\r\n\r\n    body {\r\n      background: var(--background);\r\n      -webkit-font-smoothing: antialiased; \r\n    }\r\n\r\n    body, input, textarea, button {\r\n      font-family: 'Poppins', sans-serif;\r\n      font-weight: 400;\r\n    }\r\n\r\n    h1, h2, h3, h4, h5, h6, strong {\r\n     font-weight: 600;\r\n    }\r\n\r\n    button {\r\n      cursor: pointer;\r\n    }\r\n\r\n    [disabled] {\r\n      opacity: 0.6;\r\n      cursor: not-allowed;\r\n    }\r\n\r\n    .react-modal-overlay {\r\n      background: rgba(0, 0, 0, 0.5);\r\n\r\n      position: fixed;\r\n      top: 0;\r\n      left: 0;\r\n      right: 0;\r\n      bottom: 0;\r\n\r\n      display: flex;\r\n      align-items: center;\r\n      justify-content: center;\r\n    }\r\n\r\n    .react-modal-content {\r\n      width: 100%;\r\n      max-width: 576px;\r\n      background: var(--background);\r\n      padding: 3rem;\r\n      position: relative;\r\n      border-radius: 0.25rem;\r\n    }\r\n\r\n    .react-modal-close {\r\n      position: absolute;\r\n      right: 1.5rem;\r\n      top: 1.5rem;\r\n      border: 0;\r\n      background: transparent;\r\n\r\n      transition: filter 0.2s;\r\n\r\n      &:hover {\r\n        filter: brightness(0.8);\r\n      }\r\n    }\r\n`","import Modal from 'react-modal';\nimport { useState } from 'react';\nimport { Header } from \"./components/Header\";\nimport { Dashboard } from \"./components/Dashboard\";\nimport { TransactionsProvider } from './hooks/useTransactions';\nimport { NewTransactionModal } from './components/NewTransactionModal';\n\nimport { GlobalStyle } from \"./styles/global\";\n\nModal.setAppElement('#root');\n\nexport function App() {\n  const [isNewTransactionModalOpen, setIsNewTransactionModalOpen] = useState(false);\n\n  function handleOpenNewTransactionModal() {\n    setIsNewTransactionModalOpen(true);\n  }\n\n  function handleCloseNewTransactionModal() {\n    setIsNewTransactionModalOpen(false);\n  }\n\n  return (\n    <TransactionsProvider>\n      <Header \n        onOpenNewTransactionModal={handleOpenNewTransactionModal} \n      />\n      <Dashboard />\n      <NewTransactionModal \n        isOpen={isNewTransactionModalOpen}\n        onRequestClose={handleCloseNewTransactionModal}\n      />\n      <GlobalStyle />\n    </TransactionsProvider>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createServer, Model } from 'miragejs';\nimport { App } from './App';\n\ncreateServer({\n  models: {\n    transaction: Model,\n  },\n\n  seeds(server) {\n    server.db.loadData({\n      transactions: [\n        {\n          id: 1,\n          title: 'Salário Janeiro',\n          type: 'deposit',\n          category: 'Dev',\n          amount: 6000,\n          createdAt: new Date('2021-02-12 09:00:00')\n        },\n        {\n          id: 2,\n          title: 'Conta Internet',\n          type: 'withdraw',\n          category: 'Casa',\n          amount: 200,\n          createdAt: new Date('2021-02-14 11:00:00')\n        }\n      ]\n    })\n  }, \n\n  routes() {\n    this.namespace = 'api';\n\n    this.get('/transactions', () => {\n      return this.schema.all('transaction')\n    })\n\n    this.post('/transactions', (schema, request) => {\n      const data = JSON.parse(request.requestBody);\n        \n      return schema.create('transaction', data);\n    })\n  }\n})\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}